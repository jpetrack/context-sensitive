# -*- coding: utf-8 -*-
"""
Created on Fri Apr  8 21:07:39 2016

@author: josh
"""

import ImageCreator
from ImageCreator import Modifications
from copy import deepcopy

def makeShape(shapeType, modificationsList):
    if shapeType == "Rectangle":
        shape = ImageCreator.Rectangle()
    elif shapeType == "Ellipse":
        shape = ImageCreator.Ellipse()
    else:
        raise Exception("Undefined shape type: %s" % shapeType)
    
    
    modDict = dict(modificationsList)
    keys = modDict.keys()
    if "x" in keys:
        shape.x = float(modDict['x'])
    if "y" in keys:
        shape.y = float(modDict['y'])
    if "width" in keys:
        shape.width = float(modDict['width'])
    if "height" in keys:
        shape.height = float(modDict['height'])
    if "rotation" in keys:
        shape.rotation = float(modDict['rotation'])
    if "alpha" in keys:
        shape.alpha = float(modDict['alpha'])
    if "hue" in keys:
        shape.fill[0] = float(modDict['hue'])
    if "saturation" in keys:
        shape.fill[1] = float(modDict['saturation'])
    if "brightness" in keys:
        shape.fill[2] = float(modDict['brightness'])
    
    return shape


def translateModifications(modificationsList):
    result = Modifications()
    #translate, rotate, scale, scalex, scaley, changehue,
    #changesaturation, changebrightness, changealpha, delay
    for modification in modificationsList:
        # We essentially need to do a big case-switch here for what kind it is.
        # We don't want to do this as a dict because order can matter.
        if modification[0] in ["translate", "t"]:
            result = result + Modifications.Translate(float(modification[1]), float(modification[2]))
        if modification[0] in ["absoluteTranslate", "at"]:
            result = result + Modifications.AbsoluteTranslate(float(modification[1]), float(modification[2]))
        if modification[0] in ["rotate", "r"]:
            result = result + Modifications.Rotate(float(modification[1]))
        if modification[0] == "scale":
            result = result + Modifications.Scale(float(modification[1]))
        if modification[0] == "scaleX":
            result = result + Modifications.ScaleX(float(modification[1]))
        if modification[0] == "scaleY":
            result = result + Modifications.ScaleY(float(modification[1]))
        if modification[0] in ["hue", "h"]:
            result = result + Modifications.ChangeHue(int(modification[1]))
        if modification[0] in ["saturation", "s"]:
            result = result + Modifications.ChangeSaturation(float(modification[1]))
        if modification[0] in ["brightness", "b"]:
            result = result + Modifications.ChangeBrightness(float(modification[1]))
        if modification[0] in ["alpha", "a"]:
            result = result + Modifications.ChangeAlpha(float(modification[1]))
        if modification[0] in ["delay", "d"]:
            result = result + Modifications.Delay(int(modification[1]))   
    return result

"""
Takes a syntax tree generated by Parser and translates it into the
language of ImageCreator.
"""
def translate(AST):
    animationName, filetype, duration, framerate, defaultLimit, shapes, primitives, rules, limits = AST
    
    # Create shapes.
    shapeDict = {}
    for shape in shapes:
        name, shapeType, modifications = shape
        shapeDict[name] = makeShape(shapeType, modifications)
        
    # Create animation primitives (Elements).
    elemDict = {}
    for primitive in primitives:
        name, frames = primitive
        frameList = []
        for frameSpecification in frames:
            firstFrame, firstFrameModifications = frameSpecification[:2]
            firstFrame = shapeDict[firstFrame]
            firstFrameShape = translateModifications(
                    firstFrameModifications).modifyShape(firstFrame)
            frameList.append(firstFrameShape)
            if len(frameSpecification) > 2:
                nextFrameShape = firstFrameShape
                loops, newModifications = frameSpecification[2:4]
                translatedModifications = translateModifications(newModifications)
                for i in xrange(int(loops)):
                    nextFrameShape = deepcopy(nextFrameShape)
                    translatedModifications.modifyShape(nextFrameShape)
                    frameList.append(nextFrameShape)
        elemDict[name] = ImageCreator.Element(frameList)
    
    # Make a quick limit dictionary.
    limitsByName = {}
    for limit in limits:
        limitsByName[limit[0]] = int(limit[1])
    
    # Create a rule dictionary. 
    rulesByName = {}
    for rule in rules:
        if len(rule) == 2:
            prob = 1
            name, executionRules = rule
            if not limitsByName.has_key(name):
                limitsByName[name] = int(defaultLimit)
        else:
            prob, name, executionRules = rule
        for i in xrange(len(executionRules)):
            step = executionRules[i]
            # We need to change any element names to elements.
            # we can leave rule names alone.
            if step[0] in elemDict.keys():
                executionRules[i] = (elemDict[step[0]], translateModifications(step[1]))
            else:
                executionRules[i] = (step[0], translateModifications(step[1]))
        if rulesByName.has_key(name):
            rulesByName[name].append([prob] + executionRules)
        else:
            rulesByName[name] = [[prob] + executionRules]
            
            
    ruleMaker = lambda (name, execrules): ImageCreator.Rule(
            name, execrules, limitsByName[name])
    ruleDict = ImageCreator.RuleDict(map (ruleMaker, rulesByName.items()))
    
    creator = ImageCreator.ImageCreator(512, 512, ruleDict.chooseAndExecuteRule(), animationName, int(duration))

    creator.renderAnimation()
        
                    
x = ('myanimation', 'mpfour', '300', '30', [('redSquare', 'Rectangle', [('x', '250'), ('y', '250'), ('width', '200'), ('height', '200'), ('hue', '180')])], [('insquare', [('redSquare', [], '9', [('rotate', '5'), ('scale', '0.9')])])], [('mainrule', [('insquare', []), ('mainrule', [('translate', '30'), ('alpha', '0.95'), ('hue', '45')])])])                 
                    
        